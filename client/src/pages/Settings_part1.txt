import { useState, useEffect } from 'react';
import { Form } from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useNotifications } from '@/context/NotificationContext';
import { AlertCircle, Bell, Cog, Edit, HelpCircle, Mail, Plus, Printer, Save, Send, Tag, Trash2, UserCog, Variable, Volume2, VolumeX } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';

const companySettingsSchema = z.object({
  companyName: z.string().min(2, { message: "Company name must be at least 2 characters" }),
  email: z.string().email({ message: "Invalid email address" }),
  phone: z.string().min(10, { message: "Please enter a valid phone number" }),
  address: z.string().min(5, { message: "Address must be at least 5 characters" }),
});

const notificationSettingsSchema = z.object({
  lowStockAlerts: z.boolean(),
  orderConfirmation: z.boolean(),
  shippingUpdates: z.boolean(),
  dailyReports: z.boolean(),
  weeklyReports: z.boolean(),
});

// Email settings schema
const emailSettingsSchema = z.object({
  host: z.string().min(1, { message: "SMTP host is required" }),
  port: z.coerce.number().int().positive({ message: "Port must be a positive number" }),
  secure: z.boolean().default(false),
  authUser: z.string().min(1, { message: "Username is required" }),
  authPass: z.string().optional().refine(val => {
    // For new settings, password is required
    // For updates, empty password means "keep existing password"
    return true;
  }),
  fromEmail: z.string().email({ message: "Valid email address is required" }),
  companyName: z.string().min(1, { message: "Company name is required" }),
  enableNotifications: z.boolean().default(true),
});

// Email test schema
const emailTestSchema = z.object({
  testEmail: z.string().email({ message: "Valid test email address is required" }),
});

// Template edit schema
const templateEditSchema = z.object({
  content: z.string().min(1, { message: "Template content is required" }),
});

// User form schema
const userFormSchema = z.object({
  username: z.string().min(3, { message: "Username must be at least 3 characters" }),
  password: z.string().min(6, { message: "Password must be at least 6 characters" }).optional(),
  fullName: z.string().min(2, { message: "Full name is required" }),
  role: z.enum(['admin', 'front_office', 'warehouse']),
  email: z.string().email({ message: "Invalid email address" }).optional().or(z.literal('')),
  active: z.boolean().default(true),
});

type UserType = {
  id: number;
  username: string;
  fullName: string;
  role: 'admin' | 'front_office' | 'warehouse';
  email: string | null;
  active: boolean;
  createdAt: string;
  lastLogin: string | null;
};

// User Management Component
const UserManagement = () => {
  const { toast } = useToast();
  const { hasPermission } = useAuth();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<UserType | null>(null);

  // User form with default values
  const userForm = useForm<z.infer<typeof userFormSchema>>({
    resolver: zodResolver(userFormSchema),
    defaultValues: {
      username: '',
      password: '',
      fullName: '',
      role: 'front_office',
      email: '',
      active: true,
    },
  });

  // Query to fetch users
  const { data: users, isLoading, error } = useQuery<UserType[]>({
    queryKey: ['/api/users']
  });

  // Create user mutation
  const createUserMutation = useMutation({
    mutationFn: async (values: z.infer<typeof userFormSchema>) => {
      return apiRequest('/api/users', {
        method: 'POST',
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      toast({
        title: "User Created",
        description: "The user has been created successfully.",
      });
      setIsCreateDialogOpen(false);
      userForm.reset();
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create user. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Update user mutation
  const updateUserMutation = useMutation({
    mutationFn: async ({ id, values }: { id: number; values: z.infer<typeof userFormSchema> }) => {
      return apiRequest(`/api/users/${id}`, {
        method: 'PATCH',
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      toast({
        title: "User Updated",
        description: "The user has been updated successfully.",
      });
      setIsEditDialogOpen(false);
      setSelectedUser(null);
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to update user. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Delete user mutation
  const deleteUserMutation = useMutation({
    mutationFn: async (id: number) => {
      return apiRequest(`/api/users/${id}`, {
        method: 'DELETE',
      });
    },
    onSuccess: () => {
      toast({
        title: "User Deleted",
        description: "The user has been deleted successfully.",
      });
      setIsDeleteDialogOpen(false);
      setSelectedUser(null);
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to delete user. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Handler for creating a new user
  const handleCreateUser = (values: z.infer<typeof userFormSchema>) => {
    createUserMutation.mutate(values);
  };

  // Handler for editing a user
  const handleEditUser = (user: UserType) => {
    setSelectedUser(user);
    userForm.reset({
      username: user.username,
      fullName: user.fullName,
      role: user.role,
      email: user.email || '',
      active: user.active,
      password: '', // Don't include password in edit form
    });
    setIsEditDialogOpen(true);
  };

  // Handler for updating a user
  const handleUpdateUser = (values: z.infer<typeof userFormSchema>) => {
    if (selectedUser) {
      // Remove password if it's empty string
      if (values.password === '') {
        const { password, ...dataWithoutPassword } = values;
        updateUserMutation.mutate({ id: selectedUser.id, values: dataWithoutPassword });
      } else {
        updateUserMutation.mutate({ id: selectedUser.id, values });
      }
    }
  };

  // Handler for deleting a user
  const handleDeleteUser = (user: UserType) => {
    setSelectedUser(user);
    setIsDeleteDialogOpen(true);
  };

  // Handler for confirming user deletion
  const confirmDeleteUser = () => {
    if (selectedUser) {
      deleteUserMutation.mutate(selectedUser.id);
    }
  };

  // Helper to get role display name and color
  const getRoleDisplay = (role: string) => {
    switch (role) {
      case 'admin':
        return { name: 'Admin', bgColor: 'bg-blue-100', textColor: 'text-blue-800' };
      case 'front_office':
        return { name: 'Front Office', bgColor: 'bg-purple-100', textColor: 'text-purple-800' };
      case 'warehouse':
        return { name: 'Warehouse', bgColor: 'bg-amber-100', textColor: 'text-amber-800' };
      default:
        return { name: role, bgColor: 'bg-slate-100', textColor: 'text-slate-800' };
    }
  };

  // If user doesn't have admin permission
  if (!hasPermission(['admin'])) {
    return (
      <div className="text-center p-6 space-y-2">
        <UserCog size={48} className="mx-auto text-slate-400" />
        <h3 className="text-lg font-medium">Admin Access Required</h3>
        <p className="text-slate-500">You need administrator privileges to manage users</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">System Users</h3>
        <Button 
          size="sm" 
          onClick={() => {
            userForm.reset({
              username: '',
              password: '',
              fullName: '',
              role: 'front_office',
              email: '',
              active: true,
            });
            setIsCreateDialogOpen(true);
          }}
        >
          <Plus className="h-4 w-4 mr-2" />
          Add User
        </Button>
      </div>
      
      {isLoading ? (
        <div className="text-center p-6">Loading users...</div>
      ) : error ? (
        <div className="text-center p-6 text-red-500">Error loading users</div>
      ) : users && users.length > 0 ? (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-slate-200">
            <thead className="bg-slate-50">
              <tr>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Name</th>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Username</th>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Email</th>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Role</th>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Status</th>
                <th className="py-3 px-4 text-left text-sm font-medium text-slate-600">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-200">
              {users.map((user) => {
                const roleDisplay = getRoleDisplay(user.role);
                return (
                  <tr key={user.id}>
                    <td className="py-3 px-4">{user.fullName}</td>
                    <td className="py-3 px-4">{user.username}</td>
                    <td className="py-3 px-4">{user.email || "-"}</td>
                    <td className="py-3 px-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${roleDisplay.bgColor} ${roleDisplay.textColor}`}>
                        {roleDisplay.name}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${user.active ? 'bg-green-100 text-green-800' : 'bg-slate-100 text-slate-800'}`}>
                        {user.active ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      <div className="flex space-x-2">
                        <Button variant="ghost" size="sm" onClick={() => handleEditUser(user)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => handleDeleteUser(user)} 
                                disabled={user.username === 'admin'} 
                                className={user.username === 'admin' ? 'opacity-50 cursor-not-allowed' : ''}>
                          <Trash2 className="h-4 w-4 text-red-500" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      ) : (
        <div className="text-center p-6">No users found</div>
      )}

      {/* Create User Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Create New User</DialogTitle>
            <DialogDescription>
              Add a new user to the system with specific role and permissions.
            </DialogDescription>
          </DialogHeader>
          <Form {...userForm}>
            <form onSubmit={userForm.handleSubmit(handleCreateUser)} className="space-y-4">
              <FormField
                control={userForm.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input type="password" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="fullName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Full Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a role" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="admin">Admin</SelectItem>
                        <SelectItem value="front_office">Front Office</SelectItem>
                        <SelectItem value="warehouse">Warehouse</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="active"
                render={({ field }) => (
                  <FormItem className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <FormLabel>Active</FormLabel>
                      <FormDescription>
                        User can log in when active
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button type="submit" disabled={createUserMutation.isPending}>
                  {createUserMutation.isPending ? "Creating..." : "Create User"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Edit User Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Edit User</DialogTitle>
            <DialogDescription>
              Update user information and permissions.
            </DialogDescription>
          </DialogHeader>
          <Form {...userForm}>
            <form onSubmit={userForm.handleSubmit(handleUpdateUser)} className="space-y-4">
              <FormField
                control={userForm.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input 
                        {...field} 
                        disabled={selectedUser?.username === 'admin'}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input 
                        type="password" 
                        placeholder="Leave empty to keep current password" 
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      Leave empty to keep the current password
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="fullName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Full Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input type="email" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                      disabled={selectedUser?.username === 'admin'}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a role" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="admin">Admin</SelectItem>
                        <SelectItem value="front_office">Front Office</SelectItem>
                        <SelectItem value="warehouse">Warehouse</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={userForm.control}
                name="active"
                render={({ field }) => (
                  <FormItem className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <FormLabel>Active</FormLabel>
                      <FormDescription>
                        User can log in when active
                      </FormDescription>
                    </div>
                    <FormControl>
                      <Switch
                        checked={field.value}
                        onCheckedChange={field.onChange}
                        disabled={selectedUser?.username === 'admin'}
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button type="submit" disabled={updateUserMutation.isPending}>
                  {updateUserMutation.isPending ? "Updating..." : "Update User"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Delete User Confirmation Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will permanently delete the user {selectedUser?.fullName}. This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmDeleteUser}
              className="bg-red-600 hover:bg-red-700"
              disabled={deleteUserMutation.isPending}
            >
              {deleteUserMutation.isPending ? "Deleting..." : "Delete User"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

const Settings = () => {
  const { toast } = useToast();
  const { playNotificationSound } = useNotifications();
  const { hasPermission } = useAuth();
  const [activeTab, setActiveTab] = useState('general');
  const [isTestEmailDialogOpen, setIsTestEmailDialogOpen] = useState(false);

  // Email settings form
  const emailForm = useForm<z.infer<typeof emailSettingsSchema>>({
    resolver: zodResolver(emailSettingsSchema),
    defaultValues: {
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      authUser: '',
      authPass: '',
      fromEmail: '',
      companyName: 'Warehouse Management System',
      enableNotifications: true,
    }
  });
  
  // Define email settings interface
  interface EmailSettingsData {
    id: number;
    host: string;
    port: number;
    secure: boolean;
    authUser: string;
    fromEmail: string;
    companyName: string;
    enableNotifications: boolean;
  }
  
  // Get current email settings query
  const { data: emailSettings, isLoading: isLoadingEmailSettings } = useQuery<EmailSettingsData>({
    queryKey: ['/api/email-settings'],
  });
  
  // Update form when settings are loaded
  useEffect(() => {
    if (emailSettings) {
      emailForm.reset({
        host: emailSettings.host || 'smtp.gmail.com',
        port: emailSettings.port || 587,
        secure: emailSettings.secure || false,
        authUser: emailSettings.authUser || '',
        authPass: '', // Never pre-fill password field for security
        fromEmail: emailSettings.fromEmail || '',
        companyName: emailSettings.companyName || 'Warehouse Management System',
        enableNotifications: emailSettings.enableNotifications ?? true,
      });
    }
  }, [emailSettings, emailForm]);

  // Test email form
  const testEmailForm = useForm<z.infer<typeof emailTestSchema>>({
    resolver: zodResolver(emailTestSchema),
    defaultValues: {
      testEmail: '',
    }
  });

  // Email settings mutation
  const emailSettingsMutation = useMutation({
    mutationFn: async (values: z.infer<typeof emailSettingsSchema>) => {
      console.log('Submitting email settings:', values);
      try {
        const result = await apiRequest('/api/email-settings', {
          method: 'PUT',
          body: JSON.stringify(values),
        });
        console.log('Email settings saved successfully:', result);
        return result;
      } catch (error) {
        console.error('Error saving email settings:', error);
        throw error;
      }
    },
    onSuccess: () => {
      toast({
        title: "Email Settings Saved",
        description: "Your email settings have been updated successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/email-settings'] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
      toast({
        title: "Error",
        description: "Failed to save email settings. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Test email mutation
  const testEmailMutation = useMutation({
    mutationFn: async (values: z.infer<typeof emailTestSchema>) => {
      console.log('Sending test email to:', values.testEmail);
      
      // We've updated the API to only require the test email
      return apiRequest('/api/email-settings/test-connection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          testEmail: values.testEmail,
        }),
      });
    },
    onSuccess: () => {
      toast({
        title: "Test Email Sent",
        description: "A test email has been sent successfully.",
      });
      setIsTestEmailDialogOpen(false);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to send test email. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  const openTestEmailDialog = () => {
    setIsTestEmailDialogOpen(true);
  };

  const handleTestEmail = (values: z.infer<typeof emailTestSchema>) => {
    testEmailMutation.mutate(values);
  };

  const onEmailSettingsSubmit = (values: z.infer<typeof emailSettingsSchema>) => {
    // If password is empty, remove it from the request to keep the existing password
    if (values.authPass === '') {
      const { authPass, ...valuesWithoutPassword } = values;
      emailSettingsMutation.mutate(valuesWithoutPassword);
    } else {
      emailSettingsMutation.mutate(values);
    }
  };

  // Company settings form
  const companyForm = useForm<z.infer<typeof companySettingsSchema>>({
    resolver: zodResolver(companySettingsSchema),
    defaultValues: {
      companyName: "Warehouse Systems Inc.",
      email: "info@warehousesys.com",
      phone: "1234567890",
      address: "123 Inventory Street, Logistics City",
    },
  });

  // Notification settings form
  const notificationForm = useForm<z.infer<typeof notificationSettingsSchema>>({
    resolver: zodResolver(notificationSettingsSchema),
    defaultValues: {
      lowStockAlerts: true,
      orderConfirmation: true,
      shippingUpdates: true,
      dailyReports: false,
      weeklyReports: true,
    },
  });

  // Company settings query
  const { data: companySettingsData, isLoading: isCompanyLoading } = useQuery({
    queryKey: ['/api/company-settings'],
    queryFn: () => apiRequest('/api/company-settings'),
    onSuccess: (data) => {
      companyForm.reset({
        companyName: data.companyName || '',
        email: data.email || '',
        phone: data.phone || '',
        address: data.address || '',
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to load company settings. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Company settings mutation
  const companyMutation = useMutation({
    mutationFn: async (values: z.infer<typeof companySettingsSchema>) => {
      return apiRequest('/api/company-settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/company-settings'] });
      toast({
        title: "Settings Updated",
        description: "Company settings have been saved successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to save company settings. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Handle company settings form submission
  const onCompanySubmit = (values: z.infer<typeof companySettingsSchema>) => {
    companyMutation.mutate(values);
  };

  // Notification settings query
  const { data: notificationSettingsData, isLoading: isNotificationLoading } = useQuery({
    queryKey: ['/api/notification-settings'],
    queryFn: () => apiRequest('/api/notification-settings'),
    onSuccess: (data) => {
      notificationForm.reset({
        lowStockAlerts: data.lowStockAlerts || false,
        orderConfirmation: data.orderConfirmation || false,
        shippingUpdates: data.shippingUpdates || false,
        dailyReports: data.dailyReports || false,
        weeklyReports: data.weeklyReports || false,
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to load notification settings. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Notification settings mutation
  const notificationMutation = useMutation({
    mutationFn: async (values: z.infer<typeof notificationSettingsSchema>) => {
      return apiRequest('/api/notification-settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/notification-settings'] });
      toast({
        title: "Settings Updated",
        description: "Notification settings have been saved successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to save notification settings. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });

  // Handle notification settings form submission
  const onNotificationSubmit = (values: z.infer<typeof notificationSettingsSchema>) => {
    notificationMutation.mutate(values);
  };

  // Helper function to send a test notification
  const sendTestNotification = (type: 'success' | 'warning' | 'error' = 'success') => {
    const messages = {
      success: "This is a test success notification.",
      warning: "This is a test warning notification.",
      error: "This is a test error notification.",
    };
    
    playNotificationSound(type);
    
    toast({
      title: "Test Notification",
      description: messages[type],
      variant: type === 'error' ? 'destructive' : 'default',
    });
  };

  return (
    <div className="container mx-auto py-6">
      <h1 className="text-3xl font-bold mb-6">Settings</h1>
      
      <Tabs defaultValue="general" onValueChange={setActiveTab} value={activeTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="general">
            <Cog className="h-4 w-4 mr-2" />
            General
          </TabsTrigger>
          <TabsTrigger value="notifications">
            <Bell className="h-4 w-4 mr-2" />
            Notifications
          </TabsTrigger>
          <TabsTrigger value="email">
            <Mail className="h-4 w-4 mr-2" />
            Email Settings
          </TabsTrigger>
          <TabsTrigger value="labels">
            <Printer className="h-4 w-4 mr-2" />
            Label Templates
          </TabsTrigger>
          <TabsTrigger value="users">
            <UserCog className="h-4 w-4 mr-2" />
            Users & Permissions
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="general" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Company Information</CardTitle>
              <CardDescription>
                Update your company details and preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isCompanyLoading ? (
                <div className="text-center py-4">
                  <div className="inline-block h-6 w-6 animate-spin rounded-full border-2 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                  <p className="mt-2 text-sm text-slate-500">Loading company settings...</p>
                </div>
              ) : (
                <>
                  <Form {...companyForm}>
                    <form onSubmit={companyForm.handleSubmit(onCompanySubmit)} className="space-y-6">
