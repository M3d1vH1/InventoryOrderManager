                      <FormField
                        control={companyForm.control}
                        name="companyName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Company Name</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={companyForm.control}
                          name="email"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Email</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={companyForm.control}
                          name="phone"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Phone</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={companyForm.control}
                        name="address"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Address</FormLabel>
                            <FormControl>
                              <Input {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="flex justify-end">
                        <Button type="submit">
                          <Save className="h-4 w-4 mr-2" />
                          Save Changes
                        </Button>
                      </div>
                    </form>
                  </Form>
                  
                  <Separator className="my-6" />
                  
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 className="font-medium">System Information</h3>
                        <p className="text-sm text-slate-500">Details about your current installation</p>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="p-4 bg-slate-50 rounded-md">
                        <p className="text-sm font-medium">Software Version</p>
                        <p className="text-sm text-slate-500">1.0.0</p>
                      </div>
                      
                      <div className="p-4 bg-slate-50 rounded-md">
                        <p className="text-sm font-medium">Database</p>
                        <p className="text-sm text-slate-500">PostgreSQL</p>
                      </div>
                      
                      <div className="p-4 bg-slate-50 rounded-md">
                        <p className="text-sm font-medium">Last Backup</p>
                        <p className="text-sm text-slate-500">Never</p>
                      </div>
                      
                      <div className="p-4 bg-slate-50 rounded-md">
                        <p className="text-sm font-medium">Server Time</p>
                        <p className="text-sm text-slate-500">{new Date().toLocaleString()}</p>
                      </div>
                    </div>
                  </div>
                </>
              )
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="notifications" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>
                Configure how and when you receive notifications
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isNotificationLoading ? (
                <div className="text-center py-4">
                  <div className="inline-block h-6 w-6 animate-spin rounded-full border-2 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                  <p className="mt-2 text-sm text-slate-500">Loading notification settings...</p>
                </div>
              ) : (
                <>
                  <Form {...notificationForm}>
                    <form onSubmit={notificationForm.handleSubmit(onNotificationSubmit)} className="space-y-6">
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">System Alerts</h3>
                    
                    <FormField
                      control={notificationForm.control}
                      name="lowStockAlerts"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Low Stock Alerts</FormLabel>
                            <FormDescription>
                              Receive notifications when products are running low
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <h3 className="text-lg font-medium pt-4">Order Notifications</h3>
                    
                    <FormField
                      control={notificationForm.control}
                      name="orderConfirmation"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Order Confirmations</FormLabel>
                            <FormDescription>
                              Receive notifications when new orders are placed
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={notificationForm.control}
                      name="shippingUpdates"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Shipping Updates</FormLabel>
                            <FormDescription>
                              Receive notifications when order status changes
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <h3 className="text-lg font-medium pt-4">Reports</h3>
                    
                    <FormField
                      control={notificationForm.control}
                      name="dailyReports"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Daily Reports</FormLabel>
                            <FormDescription>
                              Receive daily summary reports
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={notificationForm.control}
                      name="weeklyReports"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Weekly Reports</FormLabel>
                            <FormDescription>
                              Receive weekly summary reports
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="flex justify-end">
                    <Button type="submit">
                      <Save className="h-4 w-4 mr-2" />
                      Save Preferences
                    </Button>
                  </div>
                </form>
              </Form>
              
              <Separator className="my-6" />
              
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="font-medium">Notification Sounds</h3>
                    <p className="text-sm text-slate-500">Test and manage notification sounds</p>
                  </div>
                  <div>
                    <Button variant="outline" size="sm">
                      <Volume2 className="h-4 w-4 mr-2" />
                      Enable Sounds
                    </Button>
                  </div>
                </div>
                
                <div className="flex flex-wrap gap-2">
                  <Button 
                    variant="outline"
                    onClick={() => {
                      playNotificationSound('success');
                      toast({
                        title: "Success Sound",
                        description: "Success notification sound played.",
                      });
                    }}
                  >
                    Test Success Sound
                  </Button>
                  
                  <Button 
                    variant="outline"
                    onClick={() => {
                      playNotificationSound('warning');
                      toast({
                        title: "Warning Sound",
                        description: "Warning notification sound played.",
                      });
                    }}
                  >
                    Test Warning Sound
                  </Button>
                  
                  <Button 
                    variant="outline"
                    onClick={() => {
                      playNotificationSound('error');
                      toast({
                        title: "Error Sound",
                        description: "Error notification sound played.",
                      });
                    }}
                  >
                    Test Error Sound
                  </Button>
                  
                  <Button 
                    onClick={() => sendTestNotification('success')}
                  >
                    Send Test Notification
                  </Button>
                </div>
              </div>
                </>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="email" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Email Settings</CardTitle>
              <CardDescription>
                Configure email server settings for notifications and alerts
              </CardDescription>
            </CardHeader>
            <div className="mx-6 my-2 bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-md p-4">
              <div className="flex">
                <AlertCircle className="h-5 w-5 text-yellow-600 dark:text-yellow-500 mr-2" />
                <div>
                  <h3 className="text-sm font-medium text-yellow-800 dark:text-yellow-300">Gmail Configuration Instructions</h3>
                  <div className="mt-2 text-sm text-yellow-700 dark:text-yellow-400">
                    <p>If using Gmail, you need to:</p>
                    <ol className="list-decimal ml-4 mt-1 space-y-1">
                      <li>Enable 2-Step Verification in your Google Account</li>
                      <li>Create an App Password (Google Account → Security → App Passwords)</li>
                      <li>Use your full Gmail address as Username and the generated App Password as Password</li>
                    </ol>
                    <p className="mt-1">Regular Gmail passwords won't work due to Google's security settings.</p>
                  </div>
                </div>
              </div>
            </div>
            <CardContent>
              <Form {...emailForm}>
                <form onSubmit={emailForm.handleSubmit(onEmailSettingsSubmit)} className="space-y-6">
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">SMTP Server Configuration</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={emailForm.control}
                        name="host"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>SMTP Host</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="smtp.gmail.com" />
                            </FormControl>
                            <FormDescription>
                              Your email server address
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={emailForm.control}
                        name="port"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>SMTP Port</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="587" type="number" />
                            </FormControl>
                            <FormDescription>
                              Usually 587 (TLS) or 465 (SSL)
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <FormField
                      control={emailForm.control}
                      name="secure"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Use Secure Connection (SSL)</FormLabel>
                            <FormDescription>
                              Enable for port 465, disable for port 587
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <h3 className="text-lg font-medium pt-4">Authentication</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={emailForm.control}
                        name="authUser"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Username</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="your.email@gmail.com" />
                            </FormControl>
                            <FormDescription>
                              Usually your email address
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={emailForm.control}
                        name="authPass"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password</FormLabel>
                            <FormControl>
                              <Input {...field} type="password" placeholder="••••••••" />
                            </FormControl>
                            <FormDescription>
                              For Gmail, use an app password
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <h3 className="text-lg font-medium pt-4">Sender Information</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={emailForm.control}
                        name="fromEmail"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>From Email</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="warehouse@yourcompany.com" />
                            </FormControl>
                            <FormDescription>
                              The email address to send from
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={emailForm.control}
                        name="companyName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Company Name</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="Your Company Name" />
                            </FormControl>
                            <FormDescription>
                              Will appear as the sender name
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <FormField
                      control={emailForm.control}
                      name="enableNotifications"
                      render={({ field }) => (
                        <FormItem className="flex items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Enable Email Notifications</FormLabel>
                            <FormDescription>
                              Turn on or off all email notifications
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="flex justify-between">
                    <Button 
                      type="button" 
                      variant="outline"
                      onClick={openTestEmailDialog}
                    >
                      <Send className="h-4 w-4 mr-2" />
                      Test Connection
                    </Button>
                    
                    <Button type="submit" disabled={emailSettingsMutation.isPending}>
                      <Save className="h-4 w-4 mr-2" />
                      {emailSettingsMutation.isPending ? "Saving..." : "Save Settings"}
                    </Button>
                  </div>
                </form>
              </Form>
              
              <Dialog open={isTestEmailDialogOpen} onOpenChange={setIsTestEmailDialogOpen}>
                <DialogContent className="sm:max-w-[425px]">
                  <DialogHeader>
                    <DialogTitle>Test Email Connection</DialogTitle>
                    <DialogDescription>
                      Send a test email to verify your configuration
                    </DialogDescription>
                  </DialogHeader>
                  <Form {...testEmailForm}>
                    <form onSubmit={testEmailForm.handleSubmit(handleTestEmail)} className="space-y-4">
                      <FormField
                        control={testEmailForm.control}
                        name="testEmail"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Test Email Address</FormLabel>
                            <FormControl>
                              <Input {...field} placeholder="your@email.com" />
                            </FormControl>
                            <FormDescription>
                              Where to send the test email
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <DialogFooter>
                        <Button 
                          type="submit" 
                          disabled={testEmailMutation.isPending}
                        >
                          {testEmailMutation.isPending ? "Sending..." : "Send Test Email"}
                        </Button>
                      </DialogFooter>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
            </CardContent>
          </Card>
          
          {/* Email Templates Card */}
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>Email Templates</CardTitle>
              <CardDescription>
                Customize the email notifications sent by the system
              </CardDescription>
            </CardHeader>
            <CardContent>
              <EmailTemplateEditor />
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="labels" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Shipping Label Templates</CardTitle>
              <CardDescription>
                Customize shipping label templates for the CAB EOS1 printer
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-muted-foreground">Configure label templates for your printer. These templates will be used when printing shipping labels.</p>
                <Alert className="bg-yellow-50 border-yellow-200">
                  <AlertTitle className="flex items-center text-yellow-800">
                    <AlertCircle className="h-4 w-4 mr-2" />
                    Template for CAB EOS1 Printer
                  </AlertTitle>
                  <AlertDescription className="text-yellow-800">
                    The templates are configured specifically for the CAB EOS1 printer using JScript programming language.
                  </AlertDescription>
                </Alert>
                
                <Card>
                  <CardHeader className="py-4">
                    <CardTitle className="text-base font-medium">Shipping Label</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="mb-2 text-sm text-muted-foreground">This template is used for standard shipping labels.</p>
                    <Button variant="outline" onClick={() => setActiveTab('shipping-label-editor')}>
                      <Edit className="h-4 w-4 mr-2" />
                      Edit Template
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="users" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Users & Permissions</CardTitle>
              <CardDescription>
                Manage users and their access to the system
              </CardDescription>
            </CardHeader>
            <CardContent>
              <UserManagement />
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="help" className="mt-4">
          <Card>
            <CardHeader>
              <CardTitle>Help & Support</CardTitle>
              <CardDescription>
                Get help and support for using the system
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        Documentation
                      </CardTitle>
                      <HelpCircle className="h-4 w-4 text-slate-500" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm">
                        <p>Access the complete system documentation</p>
                        <Button variant="link" className="p-0 h-auto mt-2">
                          View Documentation
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">
                        Support
                      </CardTitle>
                      <HelpCircle className="h-4 w-4 text-slate-500" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm">
                        <p>Contact our support team for assistance</p>
                        <Button variant="link" className="p-0 h-auto mt-2">
                          Contact Support
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
                
                <Separator />
                
                <div>
                  <h3 className="text-lg font-medium mb-4">Frequently Asked Questions</h3>
                  
                  <div className="space-y-4">
                    <div className="border rounded-md p-4">
                      <h4 className="font-medium">How do I create a new order?</h4>
                      <p className="text-sm text-slate-500 mt-1">
                        Navigate to the Orders page and click on the "Create Order" button. 
                        Fill in the required information and click "Save".
                      </p>
                    </div>
                    
                    <div className="border rounded-md p-4">
                      <h4 className="font-medium">How can I update product inventory?</h4>
                      <p className="text-sm text-slate-500 mt-1">
                        Go to the Products page, find the product you want to update, 
                        and click the edit button. Update the current stock and save changes.
                      </p>
                    </div>
                    
                    <div className="border rounded-md p-4">
                      <h4 className="font-medium">Can I export reports?</h4>
                      <p className="text-sm text-slate-500 mt-1">
                        Yes, on the Reports page you can export data in various formats 
                        including CSV, Excel, and PDF.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

// Label Template Editor Component
const LabelTemplateEditor = () => {
  const { toast } = useToast();
  const [selectedTemplate, setSelectedTemplate] = useState('shipping-label');
  const [isEditing, setIsEditing] = useState(false);
  const [showVariableHelp, setShowVariableHelp] = useState(false);
  
  // Template form
  const templateForm = useForm<z.infer<typeof templateEditSchema>>({
    resolver: zodResolver(templateEditSchema),
    defaultValues: {
      content: '',
    }
  });
  
  // Get template content query
  const { data: templateData, isLoading: isLoadingTemplate, refetch: refetchTemplate } = useQuery({
    queryKey: ['/api/label-templates', selectedTemplate],
    enabled: !!selectedTemplate,
    queryFn: async () => {
      const response = await apiRequest(`/api/label-templates/${selectedTemplate}`, {
        method: 'GET',
      });
      return response;
    }
  });
  
  // Effect to update form when template data changes
  useEffect(() => {
    if (templateData && templateData.content) {
      templateForm.reset({
        content: templateData.content,
      });
    }
  }, [templateData, templateForm]);
  
  // Update template mutation
  const updateTemplateMutation = useMutation({
    mutationFn: async (values: z.infer<typeof templateEditSchema>) => {
      return apiRequest(`/api/label-templates/${selectedTemplate}`, {
        method: 'PUT',
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      toast({
        title: "Template Updated",
        description: "The label template has been updated successfully.",
      });
      setIsEditing(false);
      refetchTemplate();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to update template. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });
  
  // Template selection options
  const templateOptions = [
    { value: 'shipping-label', label: 'Standard Shipping Label' },
    // Add more templates as needed
  ];
  
  // Available variables for templates
  const availableVariables = [
    { name: "orderNumber", description: "Order number/ID" },
    { name: "customerName", description: "Customer's full name" },
    { name: "customerAddress", description: "Customer's full address" },
    { name: "customerCity", description: "Customer's city" },
    { name: "customerState", description: "Customer's state/province" },
    { name: "customerPostalCode", description: "Customer's postal code" },
    { name: "customerCountry", description: "Customer's country" },
    { name: "shippingCompany", description: "Name of shipping company used" },
    { name: "trackingNumber", description: "Shipping tracking number (if available)" },
    { name: "items", description: "List of order items (use with {{#each items}})" },
    { name: "this.name", description: "Product name (use inside {{#each items}})" },
    { name: "this.quantity", description: "Product quantity (use inside {{#each items}})" },
    { name: "companyName", description: "Your company name (from settings)" },
    { name: "shippingDate", description: "The shipping date" },
  ];
  
  // Insert a variable at cursor position
  const insertVariable = (variable: string) => {
    // Get textarea element
    const textarea = document.querySelector('textarea[name="content"]') as HTMLTextAreaElement;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = templateForm.getValues().content;
    const before = text.substring(0, start);
    const after = text.substring(end, text.length);
    
    // Insert the variable at cursor position
    const newText = `${before}{${variable}}${after}`;
    templateForm.setValue('content', newText);
    
    // Set focus back to textarea and place cursor after inserted variable
    setTimeout(() => {
      textarea.focus();
      const newCursorPos = start + variable.length + 2; // +2 for the {}
      textarea.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };
  
  // Handler for template form submission
  const onTemplateSubmit = (values: z.infer<typeof templateEditSchema>) => {
    updateTemplateMutation.mutate(values);
  };
  
  if (isEditing) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <h3 className="text-lg font-medium">Edit Label Template</h3>
            <p className="text-sm text-slate-500">Editing template for the CAB EOS1 printer using JScript</p>
          </div>
          
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={() => {
                setIsEditing(false);
                if (templateData && templateData.content) {
                  templateForm.reset({
                    content: templateData.content,
                  });
                }
              }}
            >
              Cancel
            </Button>
            <Button 
              onClick={templateForm.handleSubmit(onTemplateSubmit)}
              disabled={updateTemplateMutation.isPending}
            >
              {updateTemplateMutation.isPending ? "Saving..." : "Save Template"}
            </Button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 gap-6">
          <div className="space-y-4">
            <div className="mb-4 flex justify-between items-center">
              <h4 className="font-medium">Edit {templateOptions.find(t => t.value === selectedTemplate)?.label}</h4>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setShowVariableHelp(!showVariableHelp)}
              >
                <HelpCircle className="h-4 w-4 mr-2" />
                {showVariableHelp ? "Hide Variables" : "Show Variables"}
              </Button>
            </div>
            
            {showVariableHelp && (
              <div className="bg-slate-50 p-4 rounded-md mb-4">
                <h5 className="font-medium mb-2">Available Variables</h5>
                <p className="text-sm mb-2">Click a variable to insert it at cursor position:</p>
                <div className="flex flex-wrap gap-2">
                  {availableVariables.map((variable) => (
                    <Badge 
                      key={variable.name} 
                      variant="outline" 
                      className="cursor-pointer hover:bg-slate-100"
                      onClick={() => insertVariable(variable.name)}
                    >
                      {variable.name}
                    </Badge>
                  ))}
                </div>
                <div className="mt-3 space-y-2">
                  <Alert className="bg-yellow-50 border-yellow-200">
                    <AlertTitle className="text-yellow-800 text-xs font-medium">
                      CAB EOS1 JScript Format
                    </AlertTitle>
                    <AlertDescription className="text-yellow-800 text-xs">
                      This template uses JScript for the CAB EOS1 printer. Variables are enclosed in curly braces like {`{variable}`}. 
                      Refer to the <a href="#" className="underline">CAB programming manual</a> for JScript syntax.
                    </AlertDescription>
                  </Alert>
                </div>
              </div>
            )}
            
            <Form {...templateForm}>
              <form onSubmit={templateForm.handleSubmit(onTemplateSubmit)} className="space-y-4">
                <FormField
                  control={templateForm.control}
                  name="content"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Template JScript</FormLabel>
                      <FormControl>
                        <Textarea 
                          {...field} 
                          className="font-mono text-sm h-[500px]"
                          spellCheck={false}
                        />
                      </FormControl>
                      <FormDescription>
                        JScript code for label printing. Variable format: {`{variable_name}`}
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </form>
            </Form>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <Card className="mt-4">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg font-medium">Shipping Label Editor</CardTitle>
        <CardDescription>
          Edit the shipping label template for the CAB EOS1 printer
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex items-center space-x-4">
            <Select 
              value={selectedTemplate} 
              onValueChange={setSelectedTemplate}
            >
              <SelectTrigger className="w-[300px]">
                <SelectValue placeholder="Select a template" />
              </SelectTrigger>
              <SelectContent>
                {templateOptions.map(option => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            <Button onClick={() => setIsEditing(true)}>
              <Edit className="h-4 w-4 mr-2" />
              Edit Template
            </Button>
          </div>
          
          {isLoadingTemplate ? (
            <div className="text-center py-4">
              <div className="flex justify-center items-center gap-2">
                <span className="animate-spin">
                  <svg className="h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
                <span>Loading template...</span>
              </div>
            </div>
          ) : templateData ? (
            <div className="mt-4">
              <Alert className="bg-blue-50 border-blue-200">
                <AlertTitle className="text-blue-800">Template Loaded</AlertTitle>
                <AlertDescription className="text-blue-800">
                  The template for {templateOptions.find(t => t.value === selectedTemplate)?.label} is loaded. Click Edit Template to modify it.
                </AlertDescription>
              </Alert>
            </div>
          ) : (
            <div className="mt-4">
              <Alert className="bg-yellow-50 border-yellow-200">
                <AlertTitle className="text-yellow-800">Template Not Found</AlertTitle>
                <AlertDescription className="text-yellow-800">
                  This template doesn't exist yet. Click Edit Template to create it.
                </AlertDescription>
              </Alert>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

// Email Template Editor Component
const EmailTemplateEditor = () => {
  const { toast } = useToast();
  const [selectedTemplate, setSelectedTemplate] = useState('order-shipped');
  const [isEditing, setIsEditing] = useState(false);
  const [showVariableHelp, setShowVariableHelp] = useState(false);
  
  // Template form
  const templateForm = useForm<z.infer<typeof templateEditSchema>>({
    resolver: zodResolver(templateEditSchema),
    defaultValues: {
      content: '',
    }
  });
  
  // Get template content query
  const { data: templateData, isLoading: isLoadingTemplate, refetch: refetchTemplate } = useQuery({
    queryKey: ['/api/email-settings/templates', selectedTemplate],
    enabled: !!selectedTemplate,
    queryFn: async () => {
      const response = await apiRequest(`/api/email-settings/templates/${selectedTemplate}`, {
        method: 'GET',
      });
      return response;
    }
  });
  
  // Effect to update form when template data changes
  useEffect(() => {
    if (templateData && templateData.content) {
      templateForm.reset({
        content: templateData.content,
      });
    }
  }, [templateData, templateForm]);
  
  // Update template mutation
  const updateTemplateMutation = useMutation({
    mutationFn: async (values: z.infer<typeof templateEditSchema>) => {
      return apiRequest(`/api/email-settings/templates/${selectedTemplate}`, {
        method: 'PUT',
        body: JSON.stringify(values),
      });
    },
    onSuccess: () => {
      toast({
        title: "Template Updated",
        description: "The email template has been updated successfully.",
      });
      setIsEditing(false);
      refetchTemplate();
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to update template. " + (error instanceof Error ? error.message : String(error)),
        variant: "destructive",
      });
    }
  });
  
  // Template selection options
  const templateOptions = [
    { value: 'order-shipped', label: 'Order Shipped Notification' },
    // Add more templates as needed
  ];
  
  // Available variables for templates
  const availableVariables = [
    { name: "customerName", description: "Customer's full name" },
    { name: "orderNumber", description: "Order number/ID" },
    { name: "items", description: "List of order items (use with {{#each items}})" },
    { name: "this.name", description: "Product name (use inside {{#each items}})" },
    { name: "this.quantity", description: "Product quantity (use inside {{#each items}})" },
    { name: "trackingNumber", description: "Shipping tracking number (if available)" },
    { name: "shippingCompany", description: "Name of shipping company used" },
    { name: "notes", description: "Additional order notes" },
    { name: "companyName", description: "Your company name (from settings)" },
    { name: "currentYear", description: "Current year (automatically inserted)" },
  ];
  
  // Insert a variable at cursor position
  const insertVariable = (variable: string) => {
    // Get textarea element
    const textarea = document.querySelector('textarea[name="content"]') as HTMLTextAreaElement;
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = templateForm.getValues().content;
    const before = text.substring(0, start);
    const after = text.substring(end, text.length);
    
    // Insert the variable at cursor position
    const newText = `${before}{{${variable}}}${after}`;
    templateForm.setValue('content', newText);
    
    // Set focus back to textarea and place cursor after inserted variable
    setTimeout(() => {
      textarea.focus();
      const newCursorPos = start + variable.length + 4; // +4 for the {{}}
      textarea.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  };
  
  // Handler for template form submission
  const onTemplateSubmit = (values: z.infer<typeof templateEditSchema>) => {
    updateTemplateMutation.mutate(values);
  };
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h3 className="text-lg font-medium">Email Templates</h3>
          <p className="text-sm text-slate-500">Customize notification emails sent to customers</p>
        </div>
        
        <div className="flex gap-2">
          {isEditing ? (
            <>
              <Button 
                variant="outline" 
                onClick={() => {
                  setIsEditing(false);
                  if (templateData && templateData.content) {
                    templateForm.reset({
                      content: templateData.content,
                    });
                  }
                }}
              >
                Cancel
              </Button>
              <Button 
                onClick={templateForm.handleSubmit(onTemplateSubmit)}
                disabled={updateTemplateMutation.isPending}
              >
                {updateTemplateMutation.isPending ? "Saving..." : "Save Template"}
              </Button>
            </>
          ) : (
            <Button onClick={() => setIsEditing(true)}>
              <Edit className="h-4 w-4 mr-2" />
              Edit Template
            </Button>
          )}
        </div>
      </div>
      
      <div className="grid grid-cols-1 gap-6">
        <div className="space-y-4">
          <div className="flex items-center space-x-4">
            <Select 
              value={selectedTemplate} 
              onValueChange={setSelectedTemplate}
              disabled={isEditing}
            >
              <SelectTrigger className="w-[300px]">
                <SelectValue placeholder="Select a template" />
              </SelectTrigger>
              <SelectContent>
                {templateOptions.map(option => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          {isLoadingTemplate ? (
            <div className="text-center py-4">
              <div className="flex justify-center items-center gap-2">
                <span className="animate-spin">
                  <svg className="h-5 w-5 text-primary" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
                <span>Loading template...</span>
              </div>
            </div>
          ) : (
            <div className="border rounded-md">
              {isEditing ? (
                <div className="p-4">
                  {/* Template editor with variable helper */}
                  <div className="mb-4 flex justify-between items-center">
                    <h4 className="font-medium">Edit Template</h4>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => setShowVariableHelp(!showVariableHelp)}
                    >
                      <HelpCircle className="h-4 w-4 mr-2" />
                      {showVariableHelp ? "Hide Variables" : "Show Variables"}
                    </Button>
                  </div>
                  
                  {showVariableHelp && (
                    <div className="bg-slate-50 p-4 rounded-md mb-4">
                      <h5 className="font-medium mb-2">Available Variables</h5>
                      <p className="text-sm mb-2">Click a variable to insert it at cursor position:</p>
                      <div className="flex flex-wrap gap-2">
                        {availableVariables.map((variable) => (
                          <Badge 
                            key={variable.name} 
                            variant="outline" 
                            className="cursor-pointer hover:bg-slate-100"
                            onClick={() => insertVariable(variable.name)}
                          >
                            {variable.name}
                          </Badge>
                        ))}
                      </div>
                      <div className="mt-3 space-y-2">
                        <p className="text-xs text-slate-500">
                          <strong>Conditional blocks:</strong> Use <code className="bg-slate-100 px-1">{"{{#if variableName}}"}</code> content <code className="bg-slate-100 px-1">{"{{/if}}"}</code>
                        </p>
                        <p className="text-xs text-slate-500">
                          <strong>Loops:</strong> Use <code className="bg-slate-100 px-1">{"{{#each items}}"}</code> content <code className="bg-slate-100 px-1">{"{{/each}}"}</code>
                        </p>
                      </div>
                    </div>
                  )}
                  
                  <Form {...templateForm}>
                    <form onSubmit={templateForm.handleSubmit(onTemplateSubmit)} className="space-y-4">
                      <FormField
                        control={templateForm.control}
                        name="content"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Template HTML</FormLabel>
                            <FormControl>
                              <Textarea 
                                {...field} 
                                className="font-mono text-sm h-[500px]"
                                spellCheck={false}
                              />
                            </FormControl>
                            <FormDescription>
                              HTML + Handlebars syntax for dynamic content. Variable format: {`{{variable_name}}`}
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </form>
                  </Form>
                </div>
              ) : (
                <div className="p-4">
                  <div className="flex justify-between items-center mb-4">
                    <h4 className="font-medium">Template Preview</h4>
                    <div className="flex items-center">
                      <HelpCircle className="h-4 w-4 mr-2 text-slate-400" />
                      <span className="text-sm text-slate-500">
                        This template will be used for order shipped notifications
                      </span>
                    </div>
                  </div>
                  <div className="bg-slate-50 p-4 rounded-md overflow-auto max-h-[500px]">
                    <pre className="text-xs font-mono whitespace-pre-wrap">{templateData?.content || 'No template content available'}</pre>
                  </div>
                  
                  <div className="mt-4 p-4 border rounded-md bg-slate-50">
                    <h5 className="font-medium text-sm mb-2">Available Variables</h5>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                      {availableVariables.map((variable) => (
                        <div key={variable.name} className="text-xs">
                          <code className="bg-slate-200 px-1 rounded">{`{{${variable.name}}}`}</code>
                          <span className="text-slate-500 ml-2">{variable.description}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;